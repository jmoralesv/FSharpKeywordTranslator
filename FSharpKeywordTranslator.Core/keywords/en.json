{
  "language": "en",
  "keywords": {
    "abstract": "abstract",
    "and": "and",
    "as": "as",
    "assert": "assert",
    "base": "base",
    "begin": "begin",
    "class": "class",
    "const": "const",
    "default": "default",
    "delegate": "delegate",
    "do": "do",
    "done": "done",
    "downcast": "downcast",
    "downto": "downto",
    "elif": "elif",
    "else": "else",
    "end": "end",
    "exception": "exception",
    "extern": "extern",
    "false": "false",
    "finally": "finally",
    "fixed": "fixed",
    "for": "for",
    "fun": "fun",
    "function": "function",
    "global": "global",
    "if": "if",
    "in": "in",
    "inherit": "inherit",
    "inline": "inline",
    "interface": "interface",
    "internal": "internal",
    "lazy": "lazy",
    "let": "let",
    "match": "match",
    "member": "member",
    "mod": "mod",
    "module": "module",
    "mutable": "mutable",
    "namespace": "namespace",
    "new": "new",
    "null": "null",
    "of": "of",
    "open": "open",
    "or": "or",
    "override": "override",
    "private": "private",
    "public": "public",
    "rec": "rec",
    "return": "return",
    "sig": "sig",
    "static": "static",
    "struct": "struct",
    "then": "then",
    "to": "to",
    "true": "true",
    "try": "try",
    "type": "type",
    "upcast": "upcast",
    "use": "use",
    "val": "val",
    "void": "void",
    "when": "when",
    "while": "while",
    "with": "with",
    "yield": "yield"
  },
  "variables": {
    "name": "name",
    "age": "age",
    "sum": "sum",
    "fibonacci": "fibonacci",
    "increment": "increment",
    "result1": "result1",
    "result2": "result2",
    "apply1": "apply1",
    "filter1": "filter1",
    "three": "three",
    "color": "color",
    "red": "red",
    "green": "green",
    "blue": "blue",
    "printColorName": "printColorName",
    "personName": "personName",
    "firstOnly": "firstOnly",
    "lastOnly": "lastOnly",
    "firstLast": "firstLast",
    "firstName": "firstName",
    "lastName": "lastName",
    "list1": "list1",
    "constructQuery": "constructQuery"
  },
  "stdLib": {
    "printf": "printf",
    "printfn": "printfn",
    "string": "string"
  }
}