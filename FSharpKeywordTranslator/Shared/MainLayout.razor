@using System.Text;
@using FSharpKeywordTranslator.Core;
@inherits LayoutComponentBase
@inject LanguageConfigurationManager languageManager
@inject IJSRuntime JS
@inject HttpClient HttpClient

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <select @onchange="SwitchLanguage" class="form-control form-select" title="Language selection">
                @foreach (var item in WellKnownConstants.Languages)
                {
                    <option value="@item.Code"><span class="fi fi-@item.Country"></span> @item.Name</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="DownloadPatch" disabled="@IsPatchDownloadDisabled">Patch</button>
            <a href="https://github.com/kant2002/FSharpKeywordTranslator" target="_blank">Github</a>
            <a href="https://github.com/kant2002/fsharp/" target="_blank">About</a>
        </div>

        <CascadingValue Value="current">
            <article class="content px-4">
                @Body
            </article>
        </CascadingValue>
    </main>
</div>

@code {
    public string Language { get; set; } = "en";

    public bool IsPatchDownloadDisabled => Language == "en";

    LanguageConfiguration current;

    protected override async Task OnInitializedAsync()
    {
        languageManager.OnLanguageChanged = (_, __) =>
        {
            current = languageManager.LanguageConfiguration;
            this.StateHasChanged();
        };
        await languageManager.SetLanguageAsync(Language);
    }
    public async Task SwitchLanguage(ChangeEventArgs e)
    {
        Language = (string)e.Value!;
        await languageManager.SetLanguageAsync(Language);
    }

    public async Task DownloadPatch(MouseEventArgs e)
    {
        var patchGenerator = new PatchGenerator();
        var fileName = $"fsharp-compiler-net8-{current.Language}.patch";
        var fileStream = patchGenerator.GenerateFSharpPatch(current);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, fileStream);
    }
}