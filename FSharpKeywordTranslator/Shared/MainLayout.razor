@using System.Text;
@inherits LayoutComponentBase
@inject LanguageConfigurationManager languageManager
@inject IJSRuntime JS
@inject HttpClient HttpClient

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <select @onchange="SwitchLanguage" class="form-control form-select" title="Language selection">
                @foreach (var item in WellKnownConstants.Languages)
                {
                    <option value="@item.Code"><span class="fi fi-@item.Country"></span> @item.Name</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="DownloadPatch" disabled="@IsPatchDownloadDisabled">Patch</button>
            <a href="https://github.com/kant2002/FSharpKeywordTranslator" target="_blank">Github</a>
            <a href="https://github.com/kant2002/fsharp/" target="_blank">About</a>
        </div>

        <CascadingValue Value="current">
            <article class="content px-4">
                @Body
            </article>
        </CascadingValue>
    </main>
</div>

@code {
    public string Language { get; set; } = "en";

    public bool IsPatchDownloadDisabled => Language == "en";

    LanguageConfiguration current;

    protected override async Task OnInitializedAsync()
    {
        languageManager.OnLanguageChanged = (_, __) =>
        {
            current = languageManager.LanguageConfiguration;
            this.StateHasChanged();
        };
        await languageManager.SetLanguageAsync(Language);
    }
    public async Task SwitchLanguage(ChangeEventArgs e)
    {
        Language = (string)e.Value!;
        await languageManager.SetLanguageAsync(Language);
    }

    public async Task DownloadPatch(MouseEventArgs e)
    {
        var fileStream = await GetFileStream();
        var fileName = "fsharp-compiler-net8.patch";
        fileStream = fileStream.Replace("{LanguageName}", current.LanguageName ?? current.Language);
        var keywords = new StringBuilder();
        var keywordsOverrideCount = 6;
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Abstract, true, "ABSTRACT");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.And, false, "AND");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.As, false, "AS");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Assert, false, "ASSERT");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Base, false, "BASE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Begin, false, "BEGIN");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Class, false, "CLASS");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Const, true, "CONST");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Default, true, "DEFAULT");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Delegate, true, "DELEGATE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Do, false, "DO");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Done, false, "DONE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Elif, true, "ELIF");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Else, false, "ELSE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.End, false, "END");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Exception, false, "EXCEPTION");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Extern, true, "EXTERN");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.False, false, "FALSE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Finally, false, "FINALLY");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Fixed, true, "FIXED");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.For, false, "FOR");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Fun, false, "FUN");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Function, false, "FUNCTION");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Global, true, "GLOBAL");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.If, false, "IF");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.In, false, "IN");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Inherit, false, "INHERIT");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Inline, true, "INLINE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Interface, true, "INTERFACE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Internal, true, "INTERNAL");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Lazy, false, "LAZY");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Let, false, "LET(false)");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Match, false, "MATCH");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Member, true, "MEMBER");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Mod, false, $"INFIX_STAR_DIV_MOD_OP \"{current.Keywords.Mod}\"");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Module, false, "MODULE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Mutable, false, "MUTABLE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Namespace, true, "NAMESPACE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.New, false, "NEW");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Null, true, "NULL");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Of, false, "OF");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Open, false, "OPEN");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Or, false, "OR");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Override, true, "OVERRIDE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Private, false, "PRIVATE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Public, true, "PUBLIC");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Rec, false, "REC");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Return, true, "YIELD(false)");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Sig, false, "SIG");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Static, true, "STATIC");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Struct, false, "STRUCT");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Then, false, "THEN");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.To, false, "TO");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.True, false, "TRUE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Try, false, "TRY");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Type, false, "TYPE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Use, true, "LET(true)");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Val, false, "VAL");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Void, true, "VOID");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.When, false, "WHEN");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.While, false, "WHILE");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.With, false, "WITH");
        keywordsOverrideCount += RegisterKeywordOverride(current.Keywords.Yield, true, "YIELD(true)");

        if (keywords.Length > 1)
        {
            keywords = keywords.Remove(keywords.Length - 1, 1);
        }

        fileStream = fileStream.Replace("{KEYWORDS_OVERRIDE}", keywords.ToString());
        fileStream = fileStream.Replace("{KEYWORDS_OVERRIDE_COUNT}", keywordsOverrideCount.ToString());

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, fileStream);

        int RegisterKeywordOverride(string keywordOverride, bool fsharp, string token)
        {
            int i = 0;
            if (!string.IsNullOrEmpty(keywordOverride))
            {
                foreach (var k in keywordOverride.Split(','))
                {
                    if (k.Equals(token, StringComparison.InvariantCultureIgnoreCase))
                    {
                        continue;
                    }

                    if (k == "mod" && token == $"INFIX_STAR_DIV_MOD_OP \"mod\"")
                    {
                        continue;
                    }

                    keywords.AppendLine($@"+            {(fsharp ? "FSHARP" : "ALWAYS")}, ""{k}"", {token}");
                    i++;
                }
            }

            return i;
        }
    }

    private async Task<string> GetFileStream()
    {
        return await HttpClient.GetStringAsync("fsharp-compiler-net8.txt");
    }

}