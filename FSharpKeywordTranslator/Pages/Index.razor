@page "/"
@using Microsoft.JSInterop
@inject LanguageConfigurationManager languageManager
@inject IJSRuntime JS

<PageTitle>Examples of translations</PageTitle>

<h1>Examples of translations</h1>

<div class="alert alert-warning" role="alert">
    <code>y</code> in Spanish, <code>typ</code> in German, <code>tip</code> and <code>klass</code> in Turkish, <code>a</code>, <code>s</code>, <code>v</code> and <code>z</code> in Czech, <code>e</code> and <code>a</code> in Italian is a problem for building existing compiler.
    These words used as identifiers across codebase.  
    <code>do</code> in Polish possess unique challenge, since that word used in both Polish(TO) and English keywords(DO), and as such we cannot distinguish what it is. Same situation with <code>of</code> in Dutch where this letters mean OF in English and OR in Dutch.
</div>

@if (keywordsObj is not null)
{
    <h2>Variables</h2>

    <CodeEditor Code="@LetUsage(keywordsObj)" />

    <h2>Conditional statements</h2>

    <CodeEditor Code="@IfUsage(keywordsObj)" />

    <h2>Functions</h2>

    <CodeEditor Code="@FunctionsUsage(keywordsObj)" />

    <h2>Pattern matching</h2>

    <CodeEditor Code="@PatternMatchingUsage(keywordsObj)" />
}

@code {
    [CascadingParameter]
    public LanguageConfiguration? keywordsObj { get; set; }

    private string LetUsage(LanguageConfiguration lang)
    {
        var k = Convert(lang.Keywords);
        var v = Convert(lang.Variables);
        return $""""
{k.Let} {v.Name} = "Andrii"
{k.Let} {k.Mutable} {v.Age} = 41
"""";
    }

    private string IfUsage(LanguageConfiguration lang)
    {
        var k = Convert(lang.Keywords);
        var v = Convert(lang.Variables);
        var s = Convert(lang.StdLib);
        return $""""
{k.If} {v.Name} = "Andrii"
    {s.Printf} "{v.Age} = %d" {v.Age}

// ------------
{k.If} {v.Name} = "Andrii"
    {s.Printf} "{v.Age} = %d" {v.Age}
{k.Elif} {v.Name} = "Bohdan"
    {s.Printf} "This is Bohdan"
{k.Else}
    {s.Printf} "This is stranger"

{k.Let} {v.List1} = [ 1; 5; 100; 450; 788 ]
{k.For} i {k.In} {v.List1} {k.Do}
   {s.Printfn} "%d" i

{k.For} i = 1 {k.To} 10 {k.Do}
  {s.Printf} "%d " i

{k.For} i = 10 {k.Downto} 1 {k.Do}
  {s.Printf} "%d " i

{k.Let} {k.Mutable} t = 1
{k.While} t < 10 {k.Do}
   t <- t + 1
"""";
    }

    private string FunctionsUsage(LanguageConfiguration lang)
    {
        var k = Convert(lang.Keywords);
        var v = Convert(lang.Variables);
        return $""""
{k.Let} {v.Sum} a b = a + b

{k.Let} {k.Rec} {v.Fibonacci} n = {k.If} n < 2 {k.Then} 1 {k.Else} {v.Fibonacci} (n - 1) + {v.Fibonacci} (n - 2)

{k.Let} {k.Inline} {v.Increment} x = x + 1
{k.Let} {v.Result1} = {v.Apply1} {v.Increment} 100
{k.Let} {v.Result2} = {v.Apply1} ({k.Fun} x -> x + 1) 100
"""";
    }

    private string PatternMatchingUsage(LanguageConfiguration lang)
    {
        var k = Convert(lang.Keywords);
        var v = Convert(lang.Variables);
        var s = Convert(lang.StdLib);
        return $""""
[&lt;Literal&gt;]
{k.Let} {v.Three.ToUpperCase()} = 3

{k.Let} {v.Filter1} x =
    {k.Match} x {k.With}
    // The following line contains literal patterns combined with an OR pattern.
    | 1 | 2 | {v.Three.ToUpperCase()} -> {s.Printfn} "Found 1, 2, or 3!"
    // The following line contains a variable pattern.
    | var1 -> {s.Printfn} "%d" var1

{k.For} x {k.In} 1..10 {k.Do} {v.Filter1} x

// ------------------------

{k.Type} {v.Color.ToUpperCase()} =
    | {v.Red.ToUpperCase()} = 0
    | {v.Green.ToUpperCase()} = 1
    | {v.Blue.ToUpperCase()} = 2

{k.Let} {v.PrintColorName} ({v.Color}:{v.Color.ToUpperCase()}) =
    {k.Match} {v.Color} {k.With}
    | {v.Color.ToUpperCase()}.{v.Red.ToUpperCase()} -> {s.Printfn} "{v.Red.ToUpperCase()}"
    | {v.Color.ToUpperCase()}.{v.Green.ToUpperCase()} -> {s.Printfn} "{v.Green.ToUpperCase()}"
    | {v.Color.ToUpperCase()}.{v.Blue.ToUpperCase()} -> {s.Printfn} "{v.Blue.ToUpperCase()}"
    | _ -> ()

{v.PrintColorName} {v.Color.ToUpperCase()}.{v.Red.ToUpperCase()}

// -------------------------

{k.Type} {v.PersonName.ToUpperCase()} =
    | {v.FirstOnly.ToUpperCase()} {k.Of} {s.String}
    | {v.LastOnly.ToUpperCase()} {k.Of} {s.String}
    | {v.FirstLast.ToUpperCase()} {k.Of} {s.String} * {s.String}

{k.Let} {v.ConstructQuery} {v.PersonName} =
    {k.Match} {v.PersonName} {k.With}
    | {v.FirstOnly.ToUpperCase()}({v.FirstName}) -> {s.Printf} "May I call you %s?" {v.FirstName}
    | {v.LastOnly.ToUpperCase()}({v.LastName}) -> {s.Printf} "Are you Mr. or Ms. %s?" {v.LastName}
    | {v.FirstLast.ToUpperCase()}({v.FirstName}, {v.LastName}) -> {s.Printf} "Are you %s %s?" {v.FirstName} {v.LastName}

"""";
    }

    private T Convert<T>(T value) where T: new()
    {
        T result = new();
        foreach (var property in typeof(T).GetProperties())
        {
            var propertyValue = (string?)property.GetValue(value) ?? "";
            property.SetValue(result, propertyValue.Split(',').ElementAtOrDefault(0));
        }

        return result;
    }
}

